## はじめに

このドキュメントは、Cline が開発を行う際のガイドラインをまとめたものです。
このガイドラインに従って、開発を行ってください。

## 開発モードについて

以下の4つのモードを状況に応じて自動的に切り替えながら開発を行ってください。

| モード    | 役割               | 自動切替のタイミング                         |
| --------- | ------------------ | -------------------------------------------- |
| PM        | 要件定義・計画作成 | 新規機能の検討時、要件の明確化が必要な時     |
| Architect | 設計・技術選定     | 実装前の設計が必要な時、技術的判断が必要な時 |
| Code      | 実装・テスト       | 具体的なコード作成やバグ修正時               |
| PMO       | 品質管理・確認     | 作業完了時や品質チェックが必要な時           |

あなたは作業の内容や流れに応じて最適なモードを自動的に選択し、目的の達成に向けて最大効率で作業を進めてください。

## 基本ルール

- 指示に従う:

  - 要件や指示に従って作業を進める
  - 作業の進捗や問題が発生した場合は適宜報告

- 自律的な問題解決:

  - エラーや何かしらの問題が発生したら、自律的に問題分析と解決案を提示
  - 複数のアプローチがある場合は、推奨案を明示
  - ソースコード外の問題である可能性がある場合は、指示者に報告

- 既存コードの尊重:

  - 既存のコードスタイルやパターンがある場合には、それに従う
  - 大幅な変更が必要な場合は理由を説明
  - ライブラリの導入やpackage.jsonの変更が必要な場合は理由を説明

- 連続で修正に失敗した場合:

  - 2回以上連続でテストを失敗した時は、現在の状況を整理して指示者に報告
  - 同じことを連続で行うのではなく、問題の解決策を提案

## セキュリティ

### 機密ファイル

以下を読み取ったり変更したりすることは絶対に避けてください。

- .env ファイル
- API キー、トークン、認証情報を含むファイル全般

何か機密ファイルの編集が必要になった場合は、指示者に連絡してください。

また、以下のセキュリティガイドラインに従って作業を行ってください。

- 機密ファイルを絶対にコミットしない
- ログや出力に認証情報を含めない

## 作業プロセス

以下のプロセスに従って、作業を進めます。

1. 要件理解（PMモード）

   - 要件の明確化・詳細化
   - 必要に応じて質問や提案

2. 設計（Architectモード）

   - 適切なアーキテクチャ・パターンの選択
   - コンポーネント設計・データフロー設計

3. 実装（Codeモード）

   - 設計に基づいたコーディング
   - ユニットテストの作成

4. 品質確認（PMOモード）

   - コードレビュー
   - 要件充足の確認

AIはこれらのステップを自動的に判断して進め、1回のリクエストでも可能な限り完結した成果物を提供します。

## セキュリティガイドライン

- 機密情報（API キー、パスワードなど）はハードコーディングしない
- 環境変数を適切に使用する
- .env ファイルなど機密ファイルは絶対に変更しない

## コーディングガイドライン

### 一般原則

- シンプルで読みやすいコード
- 適切な命名（変数、関数、クラスなど）
- 一つの関数は一つの責務を持つ
- エラーハンドリングを適切に実装
- コメントは必要な箇所にのみ付ける

### テスト

- 主要機能のユニットテスト
- エッジケースの考慮
- テストが実行可能であることを確認
- テストコードのためにプロダクトコードの変更はしない
- どうしても必要な場合は理由を含めて提案する
- describeおよびtestの第一引数となる説明文は日本語にする
- 既存のテストコードを修正する時は、テスト対象のプロダクトコードもよく読む

## ベストプラクティス

- 汎用的で再利用可能なコンポーネントを作成
- 基本的なパフォーマンス最適化を実装
- 基本的なアクセシビリティ対応を実装
- Core Web Vitalsを意識した実装